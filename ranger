source "$HOME/bin/core/lsr.core.sh"

function evaluate_value() {
    local data="$1"
    local ranger_code="$2"
    
    # echo "require 'json'; local data_txt=\"${data}\"; local data=json_parse(data_txt); local value=${ranger_code}; if value ~= nil then print(value); end"

    local value="$(lua -e "require 'json'; local data_txt=\"${data}\"; local data=json_parse(data_txt); local value=${ranger_code}; if value ~= nil then print(value); end")"
    echo "$value"
}

function evaluate_template() {
    local data="$1"
    local template="$2"

    local output_code=""
    local potential_ranger_code=""
    local html_mode=false

    # echo "$template"
    
    for (( i=0; i<${#template}; i++ )); do
        local c="${template:i:1}"

        if [[ "$c" == $'\n' ]]; then
            output_code=$(printf "%s%s" "$output_code" "NEWLINE")
        fi

        if [[ "$c" == "<" && "$html_mode" == "false" ]]; then
            # handle the potential ranger code
            potential_ranger_code=$(echo "$potential_ranger_code" | tr -d '[:space:]')
            if [[ -n "$potential_ranger_code" ]]; then
                if [[ "$potential_ranger_code" == "{{"*"}}" ]]; then
                    echo "[ranger code] $potential_ranger_code"
                else
                    output_code="$output_code$potential_ranger_code"
                fi

            fi
            potential_ranger_code=""

            # handle the other output
            output_code="$output_code<"
            html_mode=true
            continue
        fi

        if [[ "$c" == ">" && "$html_mode" == "true" ]]; then
            html_mode=false
            output_code="$output_code>"
            continue
        fi

        if [[ "$html_mode" == "false" ]]; then
            potential_ranger_code="$potential_ranger_code$c"
        fi

        if [[ "$html_mode" == "true" ]]; then
            output_code="$output_code$c"
        fi
    done

    echo -n "$output_code"
    echo
}

function ranger_main_function() {
    LSR_SET_COMMAND "ranger"
    LSR_SET_SUBCOMMAND "eval" "--config=<config_file>"

    LSR_DESCRIBE_SUBCOMMAND "eval" "Evaluates a template from a certain directory"

    LSR_HANDLE_COMMAND "$@"
}

function ranger_eval() {
    LSR_CLI_INPUT_PARSER $@

    # Handling CLI input
    if ! LSR_PARAMETER_GIVEN "--config"; then
        echo "Error: No data file given"
        return
    fi

    local config_file=$(LSR_PARAMETER_VALUE "--config")
    local config_file_basepath=$(dirname "$config_file")
    echo "Info: Reading data from $config_file"

    # Getting the data as raw json string, escape all quotes and remove newlines
    local config=$(cat "$config_file" | sed 's/"/\\"/g' | tr -d '\n')

    # Getting the full template path from the data _meta section
    local main_template_file="$(evaluate_value "$config" "data.template")"
    local output_dir="$(evaluate_value "$config" "data.output")"

    if [[ "$main_template_file" == "" ]]; then
        main_template_file="template.html"
    fi

    local original_path="$(pwd)"
    cd "$data_file_basepath"
    local main_template="$(cat "$main_template_file")"
    evaluate_template "$data" "$main_template"
    local output_code="$(evaluate_template "$data" "$main_template")"

    mkdir -p "$(dirname "$output_dir")"

    touch "$output_dir"

    echo -n "$output_code" > $output_dir

    cd "$original_path"
}

ranger_main_function "$@"